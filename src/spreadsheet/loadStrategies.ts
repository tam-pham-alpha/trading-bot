import { GoogleSpreadsheet } from 'google-spreadsheet';
import { isEqual, toNumber } from 'lodash';
import { Strategy } from '../strategies';

import { PRIVATE_KEY, CLIENT_EMAIL } from './auth';

const GG_SPREADSHEET_ID = '13ddFXM7xIPqbdlqHS41YbyIDLk6YnQgb6rBSD49dJSM';
const SHEET_TITLE = 'Strategies';
const UPDATE_INTERVAL = 30000;

export const loadStrategies = async (): Promise<Strategy[]> => {
  // Initialize the sheet - doc ID is the long id in the sheets URL
  const doc = new GoogleSpreadsheet(GG_SPREADSHEET_ID);

  // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
  await doc.useServiceAccountAuth({
    // env var values are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    client_email: CLIENT_EMAIL,
    private_key: PRIVATE_KEY,
  });

  // loads document properties and worksheets
  await doc.loadInfo();
  const sheet = doc.sheetsByTitle[SHEET_TITLE];

  if (!sheet) {
    return [];
  }

  const rows = await sheet.getRows();
  return rows.map((i) => {
    return {
      symbol: i.Symbol,
      buyPrc: toNumber(i.BuyPrc),
      buyQty1: toNumber(i.BuyQty1),
      buyQty2: toNumber(i.BuyQty2),
      takeProfit: toNumber(i.TakeProfit),
      allocation: toNumber(i.Allocation),
      active: i.Active === 'TRUE',
      tickSize: toNumber(i.TickSize),
      interval: toNumber(i.Interval),
    };
  });
};

export const onStrategyChange = async (callback: (l: Strategy[]) => void) => {
  let oldList = await loadStrategies();

  setInterval(async () => {
    const newList = await loadStrategies();
    if (!isEqual(oldList.sort(), newList.sort())) {
      oldList = newList;
      callback(newList);
    }
  }, UPDATE_INTERVAL);

  // don't need to trigger changes for the first time
};
