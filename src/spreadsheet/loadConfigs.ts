import { GoogleSpreadsheet } from 'google-spreadsheet';
import { isEqual, toNumber } from 'lodash';
import { MavelliConfig } from '../types/Mavelli';

import { PRIVATE_KEY, CLIENT_EMAIL } from './auth';

const GG_SPREADSHEET_ID = '13ddFXM7xIPqbdlqHS41YbyIDLk6YnQgb6rBSD49dJSM';
const SHEET_TITLE = 'Configs';
const UPDATE_INTERVAL = 30000;

export const loadConfigs = async (): Promise<MavelliConfig> => {
  // Initialize the sheet - doc ID is the long id in the sheets URL
  const doc = new GoogleSpreadsheet(GG_SPREADSHEET_ID);

  // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
  await doc.useServiceAccountAuth({
    // env var values are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    client_email: CLIENT_EMAIL,
    private_key: PRIVATE_KEY,
  });

  // loads document properties and worksheets
  await doc.loadInfo();
  const sheet = doc.sheetsByTitle[SHEET_TITLE];

  if (!sheet) {
    return {
      priorityList: 'SSI',
      maxOrder: 0,
      ignoreIndividualConfig: false,
    };
  }

  const rows = await sheet.getRows();
  return rows.map((i) => {
    return {
      maxOrder: toNumber(i.MaxOrder),
      priorityList: i.PriorityList,
      ignoreIndividualConfig: i.IgnoreIndividualConfig,
    };
  })[0];
};

export const onConfigChange = async (callback: (l: MavelliConfig) => void) => {
  let oldItem = await loadConfigs();

  setInterval(async () => {
    const newItem = await loadConfigs();
    if (!isEqual(oldItem, newItem)) {
      oldItem = newItem;
      callback(newItem);
    }
  }, UPDATE_INTERVAL);

  callback(oldItem);
};
